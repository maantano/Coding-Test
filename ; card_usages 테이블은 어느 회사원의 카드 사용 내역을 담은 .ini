; card_usages 테이블은 어느 회사원의 카드 사용 내역을 담은 테이블입니다.
; card_usages 테이블의 구조는 다음과 같으며 id,create_at,category,amount,merchant_id
; 는 각각 아이디, 사용일, 구분(0이면 결제, 1이면 취소), 금액, 결제 가맹점 아이디를 나타낸다.

; card_usages 테이블을 이용해 이 사람이 이때까지 결제한 금액은 얼마인지, 또 이떄까지 취소한 금액은 얼마인지 조회하는 sql문을 작성해라
; 결과는 결제액을 먼저 취소액을 나중에 보여줘야한다. 취소한 금액은 양수로 보여줘야한다.

; {1149742,2018-08-24,0,7700,9449}
; {1149744,2018-08-24,0,-10000,54765}
; {1149748,2018-08-24,1,58000,137913}
; {1149743,2018-08-24,0,10000,25260}

; 결과는
; category , amount
; {0,75700}
; {1,10000}

; SELECT 
;     category,
;     SUM(amount) AS total_amount
; FROM 
;     card_usages
; GROUP BY
;     category;


; 	SELECT 
;     CASE 
;         WHEN category = 0 THEN 0
;         WHEN category = 1 THEN 1
;     END AS '구분',
;     SUM(CASE WHEN category = 0 THEN amount ELSE -amount END) AS total_amount
; FROM 
;     card_usages
; GROUP BY 
;     category
; ORDER BY 
;     category DESC;

인터넷 음악 방송 채널에서 무료 스트리밍 서비스를 하고 있습니다. 이 채널은 음악을 풀레이 리스트에 등록된 순서에 따라 연속해서
재생합니다. 플레이 리스트에 등록된 음악은 모두 다르며, 마지막 곡을 재생한 다음에는 다시 첫 번째 곡부터 반복해서 재생합니다.
또, 모든 음악은 각각의 재생 시간만큼 재생됩니다.
이 스트리밍 채널에 접속해서 listen_time분 동안 음악을 들으려 합니다. 이때, 들을 수 있는 서로 다른 곡 개수의 최댓값을 구하려 합니다.
단, 음악이 정확히 '분' 단위로 흘렀을 때 접속한다고 가정하며, 곡의 일부분만 들어도 들은 개수에 포함됩니다.

각 음악의 재생 시간이 재생 목록에 들어있는 순서대로 담긴 배열 play_list와 음악을 듣는 시간 listen_time이 매개 변수로 주어질 때,
들을 수 있는 서로 다른 곡 개수의 최댓값을 return 하도록 함수를 만드시오

play_list의 길이는 1이상 100000 이하입니다.
play_list의 원소는 1이상 10000이하인 자연수 입니다.
음악 재생시간은 모두 '분' 단위입니다.
listen_time은 1이상 10**9이하인 자연수 입니다.

입출력 예
1. play_list = [2,3,1,4], listen_time = 3, 결과값 3
2. play_list = [,1,2,3,4], listen_time = 5, 결과값 4
3. play_list = [1,2,3,4], listen_time = 20, 결과값 4